// Automatically generated by Interoptopus.

#ifndef edge_transformers
#define edge_transformers

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>




typedef enum deviceffi
    {
    DEVICEFFI_CPU = 0,
    DEVICEFFI_DML = 1,
    } deviceffi;

typedef enum graphoptimizationlevelffi
    {
    GRAPHOPTIMIZATIONLEVELFFI_DISABLE = 0,
    GRAPHOPTIMIZATIONLEVELFFI_LEVEL1 = 1,
    GRAPHOPTIMIZATIONLEVELFFI_LEVEL2 = 2,
    GRAPHOPTIMIZATIONLEVELFFI_LEVEL3 = 99,
    } graphoptimizationlevelffi;

typedef enum poolingstrategyffi
    {
    POOLINGSTRATEGYFFI_MEAN = 0,
    POOLINGSTRATEGYFFI_MAX = 1,
    POOLINGSTRATEGYFFI_FIRST = 2,
    } poolingstrategyffi;

typedef struct conditionalgenerationpipeline conditionalgenerationpipeline;

typedef struct conditionalgenerationpipelinewithpkvs conditionalgenerationpipelinewithpkvs;

typedef struct embeddingpipeline embeddingpipeline;

/// Holds text embedding with model specific threshold for cosine similarity.
typedef struct environment environment;

typedef struct optimumseq2seqpipeline optimumseq2seqpipeline;

typedef struct optimumseq2seqpipelinewithpkvs optimumseq2seqpipelinewithpkvs;

typedef struct seq2seqgenerationpipeline seq2seqgenerationpipeline;

typedef struct sequenceclassificationpipeline sequenceclassificationpipeline;

typedef struct stringbatch stringbatch;

typedef enum ffierror
    {
    FFIERROR_OK = 0,
    FFIERROR_NULL = 100,
    FFIERROR_PANIC = 200,
    FFIERROR_FAIL = 300,
    } ffierror;

typedef struct classpredictionffi
    {
    const char* label;
    float score;
    } classpredictionffi;

typedef struct useasciistringpattern
    {
    const char* ascii_string;
    } useasciistringpattern;

///Option type containing boolean flag and maybe valid data.
typedef struct option*const i8
    {
    const char* t;
    uint8_t is_some;
    } option*const i8;

///Option type containing boolean flag and maybe valid data.
typedef struct optionstringbatch
    {
    stringbatch t;
    uint8_t is_some;
    } optionstringbatch;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct slicef32
    {
    const float* data;
    uint64_t len;
    } slicef32;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct sliceu8
    {
    const uint8_t* data;
    uint64_t len;
    } sliceu8;

typedef struct embeddingffi
    {
    slicef32 embedding;
    } embeddingffi;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct sliceclasspredictionffi
    {
    const classpredictionffi* data;
    uint64_t len;
    } sliceclasspredictionffi;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct sliceuseasciistringpattern
    {
    const useasciistringpattern* data;
    uint64_t len;
    } sliceuseasciistringpattern;

typedef struct predictionffi
    {
    classpredictionffi best;
    sliceclasspredictionffi all;
    } predictionffi;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct sliceembeddingffi
    {
    const embeddingffi* data;
    uint64_t len;
    } sliceembeddingffi;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct slicepredictionffi
    {
    const predictionffi* data;
    uint64_t len;
    } slicepredictionffi;


/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_env_destroy(environment** context);

ffierror onnx_env_new(environment** context);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_string_batch_destroy(stringbatch** context);

ffierror onnx_string_batch_new(stringbatch** context);

ffierror onnx_string_batch_add(stringbatch* context, const char* add_string);

const char* onnx_string_batch_get(const stringbatch* context, uint32_t id);

uint32_t onnx_string_batch_length(const stringbatch* context);

ffierror onnx_string_batch_clear(stringbatch* context);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_cond_gen_destroy(conditionalgenerationpipeline** context);

ffierror onnx_cond_gen_from_pretrained(conditionalgenerationpipeline** context, const environment* env, const char* model_id, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_cond_gen_create_from_memory(conditionalgenerationpipeline** context, const environment* env, const sliceu8* model, const char* tokenizer_config, const char* special_tokens_map, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_cond_gen_create_from_files(conditionalgenerationpipeline** context, const environment* env, const char* model_path, const char* tokenizer_config_path, const char* special_tokens_map_path, deviceffi device, graphoptimizationlevelffi optimization);

const char* onnx_cond_gen_generate_topk_sampling(conditionalgenerationpipeline* context, const char* input, int32_t max_length, int32_t topk, float temperature);

const char* onnx_cond_gen_generate_random_sampling(conditionalgenerationpipeline* context, const char* input, int32_t max_length, float temperature);

const char* onnx_cond_gen_generate_argmax(conditionalgenerationpipeline* context, const char* input, int32_t max_length);

sliceuseasciistringpattern onnx_cond_gen_generate_topk_sampling_batch(conditionalgenerationpipeline* s, stringbatch input, int32_t max_length, int32_t topk, float temperature);

sliceuseasciistringpattern onnx_cond_gen_generate_random_sampling_batch(conditionalgenerationpipeline* s, stringbatch input, int32_t max_length, float temperature);

sliceuseasciistringpattern onnx_cond_gen_generate_argmax_batch(conditionalgenerationpipeline* s, stringbatch input, int32_t max_length);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_cond_gen_pkvs_destroy(conditionalgenerationpipelinewithpkvs** context);

ffierror onnx_cond_gen_pkvs_from_pretrained(conditionalgenerationpipelinewithpkvs** context, const environment* env, const char* model_id, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_cond_gen_pkvs_create_from_memory(conditionalgenerationpipelinewithpkvs** context, const environment* env, const const sliceu8** model, const char* tokenizer_config, const char* special_tokens_map, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_cond_gen_pkvs_create_from_paths(conditionalgenerationpipelinewithpkvs** context, const environment* env, const char* model, const char* tokenizer_config, const char* special_tokens_map, deviceffi device, graphoptimizationlevelffi optimization);

const char* onnx_cond_gen_pkvs_generate_topk_sampling(conditionalgenerationpipelinewithpkvs* context, const char* input, int32_t max_length, int32_t topk, float temperature);

const char* onnx_cond_gen_pkvs_generate_random_sampling(conditionalgenerationpipelinewithpkvs* context, const char* input, int32_t max_length, float temperature);

const char* onnx_cond_gen_pkvs_generate_argmax(conditionalgenerationpipelinewithpkvs* context, const char* input, int32_t max_length);

sliceuseasciistringpattern onnx_cond_gen_pkvs_generate_topk_sampling_batch(conditionalgenerationpipelinewithpkvs* s, stringbatch input, int32_t max_length, int32_t topk, float temperature);

sliceuseasciistringpattern onnx_cond_gen_pkvs_generate_random_sampling_batch(conditionalgenerationpipelinewithpkvs* s, stringbatch input, int32_t max_length, float temperature);

sliceuseasciistringpattern onnx_cond_gen_pkvs_generate_argmax_batch(conditionalgenerationpipelinewithpkvs* s, stringbatch input, int32_t max_length);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_emb_destroy(embeddingpipeline** context);

ffierror onnx_emb_from_pretrained(embeddingpipeline** context, const environment* env, const char* model_id, poolingstrategyffi pooling_strategy, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_emb_create_from_memory(embeddingpipeline** context, const environment* env, const const sliceu8** model, const char* tokenizer_config, const char* special_tokens_map, poolingstrategyffi pooling_strategy, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_emb_create_from_files(embeddingpipeline** context, const environment* env, const char* model_path, const char* tokenizer_config_path, const char* special_tokens_map_path, poolingstrategyffi pooling_strategy, deviceffi device, graphoptimizationlevelffi optimization);

embeddingffi onnx_emb_embed(embeddingpipeline* s, const char* input);

sliceembeddingffi onnx_emb_embed_batch(embeddingpipeline* s, stringbatch input);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_classification_destroy(sequenceclassificationpipeline** context);

ffierror onnx_classification_from_pretrained(sequenceclassificationpipeline** context, const environment* env, const char* model_id, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_classification_create_from_memory(sequenceclassificationpipeline** context, const environment* env, const sliceu8* model, const char* tokenizer_config, const char* special_tokens_map, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_classification_create_from_files(sequenceclassificationpipeline** context, const environment* env, const char* model_path, const char* tokenizer_config_path, const char* special_tokens_map_path, deviceffi device, graphoptimizationlevelffi optimization);

predictionffi onnx_classification_classify(sequenceclassificationpipeline* s, const char* input);

slicepredictionffi onnx_classification_classify_batch(sequenceclassificationpipeline* s, stringbatch input);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_optimum_seq2seq_destroy(optimumseq2seqpipeline** context);

ffierror onnx_optimum_seq2seq_from_pretrained(optimumseq2seqpipeline** context, const environment* env, const char* model_id, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_optimum_seq2seq_create_from_memory(optimumseq2seqpipeline** context, const environment* env, const sliceu8* encoder_model, const sliceu8* decoder_model, const char* tokenizer_config, const char* special_tokens_map, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_optimum_seq2seq_create_from_files(optimumseq2seqpipeline** context, const environment* env, const char* encoder_model_path, const char* decoder_model_path, const char* tokenizer_config_path, const char* special_tokens_map_path, deviceffi device, graphoptimizationlevelffi optimization);

const char* onnx_optimum_seq2seq_generate_topk_sampling(optimumseq2seqpipeline* context, const char* input, option*const i8 decoder_input, int32_t max_length, int32_t topk, float temperature);

const char* onnx_optimum_seq2seq_generate_random_sampling(optimumseq2seqpipeline* context, const char* input, option*const i8 decoder_input, int32_t max_length, float temperature);

const char* onnx_optimum_seq2seq_generate_argmax(optimumseq2seqpipeline* context, const char* input, option*const i8 decoder_input, int32_t max_length);

sliceuseasciistringpattern onnx_optimum_seq2seq_generate_topk_sampling_batch(optimumseq2seqpipeline* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length, int32_t topk, float temperature);

sliceuseasciistringpattern onnx_optimum_seq2seq_generate_random_sampling_batch(optimumseq2seqpipeline* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length, float temperature);

sliceuseasciistringpattern onnx_optimum_seq2seq_generate_argmax_batch(optimumseq2seqpipeline* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_optimum_seq2seq_pkvs_destroy(optimumseq2seqpipelinewithpkvs** context);

ffierror onnx_optimum_seq2seq_pkvs_from_pretrained(optimumseq2seqpipelinewithpkvs** context, const environment* env, const char* model_id, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_optimum_seq2seq_pkvs_create_from_memory(optimumseq2seqpipelinewithpkvs** context, const environment* env, const sliceu8* encoder_model, const sliceu8* decoder_model, const sliceu8* decoder_model_pkvs, const char* tokenizer_config, const char* special_tokens_map, deviceffi device, graphoptimizationlevelffi optimization_level);

ffierror onnx_optimum_seq2seq_pkvs_create_from_files(optimumseq2seqpipelinewithpkvs** context, const environment* env, const char* encoder_model_path, const char* decoder_model_path, const char* decoder_model_pkvs_path, const char* tokenizer_config_path, const char* special_tokens_map_path, deviceffi device, graphoptimizationlevelffi optimization_level);

const char* onnx_optimum_seq2seq_pkvs_generate_topk_sampling(optimumseq2seqpipelinewithpkvs* context, const char* input, option*const i8 decoder_input, int32_t max_length, int32_t topk, float temperature);

const char* onnx_optimum_seq2seq_pkvs_generate_random_sampling(optimumseq2seqpipelinewithpkvs* context, const char* input, option*const i8 decoder_input, int32_t max_length, float temperature);

const char* onnx_optimum_seq2seq_pkvs_generate_argmax(optimumseq2seqpipelinewithpkvs* context, const char* input, option*const i8 decoder_input, int32_t max_length);

sliceuseasciistringpattern onnx_optimum_seq2seq_pkvs_generate_topk_sampling_batch(optimumseq2seqpipelinewithpkvs* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length, int32_t topk, float temperature);

sliceuseasciistringpattern onnx_optimum_seq2seq_pkvs_generate_random_sampling_batch(optimumseq2seqpipelinewithpkvs* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length, float temperature);

sliceuseasciistringpattern onnx_optimum_seq2seq_pkvs_generate_argmax_batch(optimumseq2seqpipelinewithpkvs* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror onnx_seq2seq_destroy(seq2seqgenerationpipeline** context);

ffierror onnx_seq2seq_from_pretrained(seq2seqgenerationpipeline** context, const environment* env, const char* model_id, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_seq2seq_create_from_memory(seq2seqgenerationpipeline** context, const environment* env, const sliceu8* model, const char* tokenizer_config, const char* special_tokens_map, deviceffi device, graphoptimizationlevelffi optimization);

ffierror onnx_seq2seq_create_from_files(seq2seqgenerationpipeline** context, const environment* env, const char* model_path, const char* tokenizer_config_path, const char* special_tokens_map_path, deviceffi device, graphoptimizationlevelffi optimization);

const char* onnx_seq2seq_generate_topk_sampling(seq2seqgenerationpipeline* context, const char* input, option*const i8 decoder_input, int32_t max_length, int32_t topk, float temperature);

const char* onnx_seq2seq_generate_random_sampling(seq2seqgenerationpipeline* context, const char* input, option*const i8 decoder_input, int32_t max_length, float temperature);

const char* onnx_seq2seq_generate_argmax(seq2seqgenerationpipeline* context, const char* input, option*const i8 decoder_input, int32_t max_length);

sliceuseasciistringpattern onnx_seq2seq_generate_topk_sampling_batch(seq2seqgenerationpipeline* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length, int32_t topk, float temperature);

sliceuseasciistringpattern onnx_seq2seq_generate_random_sampling_batch(seq2seqgenerationpipeline* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length, float temperature);

sliceuseasciistringpattern onnx_seq2seq_generate_argmax_batch(seq2seqgenerationpipeline* s, stringbatch input, optionstringbatch decoder_input, int32_t max_length);


#ifdef __cplusplus
}
#endif

#endif /* edge_transformers */
