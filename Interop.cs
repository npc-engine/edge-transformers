// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using NPCEngine;
#pragma warning restore 0105

namespace NPCEngine
{
    public static partial class InteropClass
    {
        public const string NativeLib = "transformers_onnx_pipelines";

        static InteropClass()
        {
        }


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "onnx_env_destroy")]
        public static extern FFIError onnx_env_destroy(ref IntPtr context);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "onnx_env_new")]
        public static extern FFIError onnx_env_new(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "onnx_cond_gen_destroy")]
        public static extern FFIError onnx_cond_gen_destroy(ref IntPtr context);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "onnx_cond_gen_new")]
        public static extern FFIError onnx_cond_gen_new(ref IntPtr context, IntPtr env, Sliceu8 model, string tokenizer_config, string special_tokens_map, Device device);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "onnx_cond_gen_generate_topk_sampling")]
        public static extern IntPtr onnx_cond_gen_generate_topk_sampling(IntPtr context, string input, int max_length, int topk, float temperature);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "onnx_cond_gen_generate_random_sampling")]
        public static extern IntPtr onnx_cond_gen_generate_random_sampling(IntPtr context, string input, int max_length, float temperature);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "onnx_cond_gen_generate_argmax")]
        public static extern IntPtr onnx_cond_gen_generate_argmax(IntPtr context, string input, int max_length);

    }

    /// Device enum to specify the device to run the model on
    public enum Device
    {
        CPU = 0,
        DML = 1,
    }

    public enum FFIError
    {
        Ok = 0,
        Null = 100,
        Panic = 200,
        Fail = 300,
    }

    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Sliceu8
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct Sliceu8 : IEnumerable<byte>
    {
        public Sliceu8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public Sliceu8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<byte>(ptr);
            }
        }
        public byte[] Copied
        {
            get
            {
                var rval = new byte[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }



    /// Holds text embedding with model specific threshold for cosine similarity.
    public partial class EnvContainer : IDisposable
    {
        private IntPtr _context;

        private EnvContainer() {}

        public static EnvContainer New()
        {
            var self = new EnvContainer();
            var rval = InteropClass.onnx_env_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = InteropClass.onnx_env_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    public partial class ConditionalGenerationPipeline : IDisposable
    {
        private IntPtr _context;

        private ConditionalGenerationPipeline() {}

        public static ConditionalGenerationPipeline New(IntPtr env, Sliceu8 model, string tokenizer_config, string special_tokens_map, Device device)
        {
            var self = new ConditionalGenerationPipeline();
            var rval = InteropClass.onnx_cond_gen_new(ref self._context, env, model, tokenizer_config, special_tokens_map, device);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = InteropClass.onnx_cond_gen_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public string GenerateTopkSampling(string input, int max_length, int topk, float temperature)
        {
            var s = InteropClass.onnx_cond_gen_generate_topk_sampling(_context, input, max_length, topk, temperature);
            return Marshal.PtrToStringAnsi(s);
        }

        public string GenerateRandomSampling(string input, int max_length, float temperature)
        {
            var s = InteropClass.onnx_cond_gen_generate_random_sampling(_context, input, max_length, temperature);
            return Marshal.PtrToStringAnsi(s);
        }

        public string GenerateArgmax(string input, int max_length)
        {
            var s = InteropClass.onnx_cond_gen_generate_argmax(_context, input, max_length);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
